require('dotenv').config();

function authMiddleware(req, res, next) {
  try {
    console.log('üîê Verificando autentica√ß√£o para:', req.method, req.path);
    
    const auth = req.headers.authorization;
    if (!auth || !auth.startsWith('Basic ')) {
      console.log('‚ùå Autentica√ß√£o n√£o fornecida');
      res.set('WWW-Authenticate', 'Basic realm="GestaoPadaria"');
      return res.status(401).json({ 
        error: 'Autentica√ß√£o requerida',
        message: 'Credenciais n√£o fornecidas'
      });
    }
    
    const base64 = auth.split(' ')[1];
    const [user, pass] = Buffer.from(base64, 'base64').toString().split(':');
    
    // Verificar se as vari√°veis de ambiente est√£o configuradas
    if (!process.env.PADARIA_USER || !process.env.PADARIA_PASS) {
      console.error('‚ùå Vari√°veis de autentica√ß√£o n√£o configuradas');
      return res.status(500).json({ 
        error: 'Configura√ß√£o de autentica√ß√£o incompleta',
        message: 'PADARIA_USER e PADARIA_PASS devem estar configuradas'
      });
    }
    
    if (user === process.env.PADARIA_USER && pass === process.env.PADARIA_PASS) {
      console.log('‚úÖ Autentica√ß√£o bem-sucedida para usu√°rio:', user);
      return next();
    }
    
    console.log('‚ùå Credenciais inv√°lidas para usu√°rio:', user);
    res.set('WWW-Authenticate', 'Basic realm="GestaoPadaria"');
    return res.status(401).json({ 
      error: 'Usu√°rio ou senha inv√°lidos',
      message: 'Credenciais incorretas'
    });
  } catch (error) {
    console.error('‚ùå Erro no middleware de autentica√ß√£o:', error);
    return res.status(500).json({ 
      error: 'Erro interno na autentica√ß√£o',
      message: error.message
    });
  }
}

module.exports = authMiddleware; 